version: "3.8"

services:
  jdecs-app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    volumes:
      - ./:/var/www
#     - ./.env.example.production:/var/www/.env
    environment:
      APP_ENV: production
      SCHEDULER: false
    networks:
      - jdecs

  jdecs-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    volumes:
      - ./:/var/www
    environment:
      APP_ENV: production
      SCHEDULER: true
    networks:
      - jdecs

  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./public:/var/www/public
      - ./docker/conf/nginx.prod.conf:/etc/nginx/nginx.conf
      - ../jdecs-front-end/dist:/var/www/frontend
#     - ./docker/conf/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - jdecs-app
    networks:
      - jdecs

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - jdecs

  # certbot:
  #  image: certbot/certbot
  #  restart: unless-stopped
  #  volumes:
  #    - certbot-etc:/etc/letsencrypt
  #    - certbot-var:/var/lib/letsencrypt
  #    - ./public:/var/www/public
  #  entrypoint: >
  #    sh -c "trap exit TERM; while :; do
  #          certbot renew --webroot -w /var/www/public --quiet &&
  #          nginx -s reload;
  #          sleep 12h & wait $${!};
  #          done"
networks:
  jdecs:
    driver: bridge

volumes:
  redis_data:
#  certbot-etc:
#  certbot-var:
